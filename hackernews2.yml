openapi: 3.0.1
info:
  version: 1.0.0
  title: Hacker News
  description:
    "This is the Open API documentation for the REST API of our beloved
    application **Hackernews** deployed at
    <https://haopeng138.pythonanywhere.com/>. <br>
    All operations are executable. Only one operation requires authentication: `deleteTweet`. In
    this case, you must **Authorize** your request by providing the api_key
    vaule you got when you created the tweet."
servers:
  - url: "http://127.0.0.1:8000/api"
  - url: "https://haopeng138.pythonanywhere.com/api"

paths:

  /users/:
  # user_list
    get:
      tags:
        - User
      summary: Retrieves a list of all users
      description: Returns a list of all users, can specify a subset of ID's and the fields
      operationId: users_list

      parameters:
        - name: fields
          in: query
          style: form
          explode: false
          required: false
          description: Filter User fields in response
          schema:
            type: array
            items:
              type: string
              enum: [id, username, email, karma, date_joined, about]
        - name: id
          in: query
          style: form
          explode: false
          required: false
          description: Filter subset of id's to get
          schema:
            type: array
            items:
              type: integer
      
      responses:
          200:
            description: Successful operation
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/User"

    post:
      tags:
        - User
      summary: Create a new user
      description: Creates a new user and returns the created object
      operationId: new_user
      
      requestBody:
        content:
          application/json:
            schema:
              required:
                - username
                - email
                - password
              type: object
              properties:
                username:
                  type: string
                  example: 'Username'
                email:
                  type: string
                  example: 'myemail@domain.com'
                password:
                  type: string

      responses:
          201:
            description: Successful operation - User Created
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    id:
                      type: integer
                      format: int64
                      example: 1
                    username:
                      type: string
                      example: 'Username'
                    email:
                      type: string
                      example: 'myemail@domain.com'
                    key:
                      type: string
                      example: 'j3jj0uLL.0PWhHAtOLkahO6Joq7ZZy9eMclUBkjzt'
          400:
            description: Missing required fields
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    email:
                      type: array
                      example: ["This field is required"]
                    password:
                      type: array
                      example: ["This field is required"]
          409:
            description: Conflict during creation
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    email:
                      type: array
                      example: ["Email already in use."]

  /users/{id}/:
  # user_detail
    get:
      tags:
        - User
      summary: Retrieves an user by its id
      description: Returns an user
      operationId: user

      parameters:
        - name: id
          in: path
          description: id of user to return
          required: true
          schema:
            type: integer
        - in: query
          name: fields
          style: form
          explode: false
          required: false
          description: Filter response fields
          schema:
            type: array
            items:
              type: string
              enum: [id, username, email, karma, date_joined, about]
        
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        404:
          description: User not found
          content:
            application/json: 
              example: 
                detail: "User with ID: 7 was not found"

    put:
      tags:
        - User
      summary: Update a User's info
      description: This can only be done by the logged user
      operationId: update_user
      security:
        - ApiKeyAuth: []
      parameters:
        - name: id
          in: "path"
          description: "User object that needs to be updated"
          required: true
          schema:
            type: integer

      requestBody:
        description: User object
        content:
          application/json:
             schema:
                type: object
                properties:
                  username:
                    type: string
                    example: "Pablo"
                  about:
                    type: string
                    example: "I'm a software pro!"
      
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        403:
          description: Permission denied
          content:
            application/json: 
              example: 
                detail: "Cannot update other user's info"
        404:
          description: User not found
          content:
            application/json: 
              example: 
                detail: "User with ID: 7 was not found"
        401:
          description: "Error: Unauthorized"
          content:
            application/json:
              example:
                detail: "Api-Key credentials were not provided."
        400:
          description: Bad request
    
    delete:
      tags:
        - User
      summary: Delete user
      description: This can only be done by the logged user
      operationId: update_user
      security:
        - ApiKeyAuth: []
      parameters:
        - name: id
          in: path
          description: "User's ID to delete"
          required: true
          schema:
            type: integer
      
      responses:
        200:
          description: successful operation
          content:
            application/json:
              example:
                detail: "User has been deleted"
        401:
          description: "Error: Unauthorized"
          content:
            application/json:
              example:
                detail: "Api-Key credentials were not provided."
        403:
          description: "Error: Permission Denied"
          content:
            application/json:
              example:
                detail: "Cannot delete other users"
        404:
          description: User not found
          content:
            application/json: 
              example: 
                detail: "User with ID: 7 was not found"

  /users/{id}/comments:
  # user_comments
    get:
      tags:
        - User
        - Comment
      summary: User's comments
      description: Returns the user's comments or comments he has upvoted
      operationId: userComments

      parameters:
        - name: id
          in: path
          description: ID of User to check
          required: true
          schema:
            type: string
        - name: upvoted   
          in: query
          schema:
            type: boolean
          description: False for user's comments, True for user's upvoted comments
      
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        401:
          description: "Error: Unauthorized"
          content:
            application/json:
              example:
                detail: "Api-Key credentials were not provided."
        403:
          description: "Error: Permission Denied"
          content:
            application/json:
              example:
                detail: "Cannot view other user's upvoted submissions"
        404:
          description: User not found
          content:
            application/json: 
              example: 
                detail: "User with ID: 7 was not found"
 
  /users/{id}/submission:
  # user_submissions
    get:
      tags:
        - User
        - Submission
      summary: User submissions
      description: Returns the user's submissions or upvoted submissions
      operationId: userSubmissions

      parameters:
        - name: id
          in: path
          description: ID of User to check
          required: true
          schema:
            type: string
        - name: upvoted
          in: query
          schema:
            type: boolean
          description: False for user's submissions, True for user's upvoted submssions
     
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Submission"
        401:
          description: "Error: Unauthorized"
          content:
            application/json:
              example:
                detail: "Api-Key credentials were not provided."
        403:
          description: "Error: Permission Denied"
          content:
            application/json:
              example:
                detail: "Cannot view other user's upvoted submissions"
        404:
          description: User not found
          content:
            application/json: 
              example: 
                detail: "User with ID: 7 was not found"


  /submissions/:
  # submission_list
    get:
      tags:
        - Submission
      summary: Retrieves all the submissions
      operationId: GET_Submission
      parameters:
        - name: fields
          in: query
          style: form
          explode: false
          required: false
          description: Filter output fields
          schema:
            type: array
            items:
              type: string
              enum: ['id','title', 'url', 'site', 'text', 'votes', 'user', 'insert_date', 'numComments','commentIDs']       
        - name: id
          in: query
          style: form
          explode: false
          required: false
          description: Filter subset of id's to get
          schema:
            type: array
            items:
              type: integer
        - name: order_by
          in: query
          style: form
          explode: false
          required: false
          description: Select field to order submisisons by
          schema:
            type: string
            enum: ['id', 'numComments', 'insert_date', 'votes']
        - name: ascending
          in: query
          description: If order_by is specified, indicates if the order is ascending or descending
          required: false
          schema:
            type: boolean

      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Submission"

    post:
      tags:
        - Submission
      summary: Post a submission to Hackernews
      description: Provide the title, url and text required to create the submission
      operationId: POST_Submission
      security:
        - ApiKeyAuth: []
      requestBody:
        content:
          application/json:
            schema:
              required:
                - title
              type: object
              properties:
                title:
                  type: string
                  example: 'Titol'
                url:
                  type: string
                  example: 'https://editor.swagger.io/#'
                text:
                  type: string
                  example: 'Aquest es un enllaç que redirecciona al editor swagger'

      responses:
        201:
          description: 'Created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Submission'
        400:
          description: Missing required fields
          content:
            application/json:
              schema:
                type: object
                properties:
                  title:
                    type: array
                    example: ["This field is required"]
        401:
          description: "Error: Unauthorized"
          content:
            application/json:
              example:
                detail: "Api-Key credentials were not provided."
        409:
          description: Conflict during creation
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: array
                    example: ["Email already in use."]

  /submissions/{id}/:
    get:
      tags:
        - Submission
      summary: Finds a Submission by its ID
      description: Returns a single Submission
      operationId: detailedSubmission
      parameters:
        - name: id
          in: path
          description: ID of the Submission
          required: true
          schema:
            type: integer
            format: int64
      
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Submission"
        400:
          description: "Error: Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResult"
              examples:
                errorExample:
                  $ref: "#/components/examples/error400content"
    
    delete:
      tags:
        - Submission
      summary: Deletes a Submission by its ID
      description: Deletes the specified submission only if the ApiKey belongs to te author
      operationId: deleteSubmission
      security:
        - ApiKeyAuth: []
      
      parameters:
        - name: id
          in: path
          description: ID of the Submission
          required: true
          schema:
            type: integer
            format: int64
      
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Submission"
        400:
          description: "Error: Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResult"
              examples:
                errorExample:
                  $ref: "#/components/examples/error400content"
  
  /submissions/{id}/comments:
    get:
      tags:
        - Submission
        - Comment
      summary: Retrieve comments of a certain submission
      description: Returns the comments of the specified submission
      operationId: commentsSubmission
      parameters:
        - name: id
          in: path
          description: ID of the Submission
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation         
        404:
          description: "Error: Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResult"
              examples:
                errorExample:
                  $ref: "#/components/examples/error404submssionid"
   
    post:
      tags:
        - Comment
      summary: Adds a new comment for the submission
      description: Returns a single Submission
      operationId: addComment
      parameters:
        - name: id
          in: path
          description: ID of the Submission
          required: true
          schema:
            type: integer
            format: int64
      
      requestBody:
        description: Provide the content of the new comment
        content:
          application/json:
            schema:
              required:
                - content
              type: object
              properties:
                content:
                  minLength: 1
                  example: "This is a new comment"
        required: true
      
      responses:
        201:
          description: Comment added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        400:
          description: "Error: Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResult"
              examples:
                errorExample:
                  $ref: "#/components/examples/error400content"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/examples/error401"
        404:
          description: "Error: Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResult"
              examples:
                errorExample:
                  $ref: "#/components/examples/error404submssionid"

  /comment/{id}/:
    get:
      tags:
        - Comment
      summary: Retrieves a commet by it's ID.
      operationId: GET_commentsReply
      parameters:
       - name: id
         in: path
         description: ID of the Comment
         required: true
         schema:
          type: integer
          format: int64
      
      responses:
        200:
          description: Obtained comment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          
    post:
      tags:
        - Comment
      summary: Makes a reply to a comment.
      description: Makes a reply comment to the specified comment.
      operationId: commentsReply
      parameters:
       - name: id
         in: path
         description: ID of the Comment
         required: true
         schema:
          type: integer
          format: int64
      
      requestBody:
        description: Provide the content of the new comment
        content:
          application/json:
            schema:
              required:
                - content
              type: object
              properties:
                content:
                  minLength: 1
                  example: "This is a new reply"
        required: true
      
      responses:
        201:
          description: 'Created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        400:
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: "#/components/examples/error400Submission"

  /vote-post/{id}/:
    post:
      tags:
        - Votes
      summary: Vote the specified post
      parameters:
        - name: id
          in: path
          description: ID of the post to vote
          required: true
          schema:
            type: integer
      
      responses:
        200:
          description: "Error: Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResult"
              examples:
                errorExample:
                  $ref: "#/components/examples/error400content"

  /vote-comment/{id}/:
    post:
      tags:
        - Votes
      summary: Vote the specified comment
      parameters:
        - name: id
          in: path
          description: ID of the comment to vote
          required: true
          schema:
            type: integer

      responses:
        202:
          description: Post voted/Unvoted successfully

components:
  #responses:
  
  schemas:

    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        username:
          type: string
          example: Paco
        email:
          type: string
          example: paco@gmail.com
        karma:
          type: integer
          format: int64
          example: 2
        date_joined:
          type: string
          example: "2022-11-25"
        about:
          type: string
          example: "Hello, I'm..."

    Submission:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 2
        title:
          type: string
          example: "Submission URL"
        url:
          type: string
          example: "https://prova.cat"
        site:
          type: string
          example: "prova.cat"
        text:
          type: string
          example: null
        votes:
          type: integer
          format: int64
          example: 2
        insert_date:
          type: string
          example: "2022-11-25"
        user:
          type: object
          $ref: "#/components/schemas/User"
        numComments:
          type: integer
          format: int64
          example: 3
        commentIDs:
          type: array
          format: integer
          example: [1, 4, 6]

    Comment: 
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 2
        postID:
          type: integer
          format: int64
          example: 1
        user:
          type: object
          $ref: "#/components/schemas/User"
        insert_date: 
          type: string 
          example: "2022-11-25T11:29:16.141331Z"
        content:
          type: string
          example: "Este es una reply a un comentario"
        replyTo:
          type: integer
          format: int64
          example: 1

    UpvotePost:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: 'Votado con existo'
    UpvoteComment:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: 'Votado con existo'
    UnvotePost:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: 'Has desvotado'
    UnvoteComment:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: 'Has desvotado'
    
    ErrorResult:
      type: object
      properties:
        status:
          type: integer
          enum: [400, 401, 403, 404, 409]
        error:
          type: string
          enum:
            [
              "Bad Request",
              "Unauthorized",
              "Forbidden",
              "Not Found",
              "Conflict",
            ]
        message:
          type: string
   


  examples:

    error400:
      value:
        status: 400
        error: "Bad Request"
        message: "Something in your request body is wrong"
    error400Submission:
      value:
        status: 400
        error: "Bad Request"
        message: "A submission with the same url was already posted"
    error401:
      value:
        detail: "Api-Key credentials were not provided"
    error403:
      value:
        status: 403
        error: "Forbidden"
        message: "Your api key (X-API-KEY Header) is not valid"
    $ref error404user:
      type: object
      properties:
        detail: "User with ID: 7 was not found"
    error404submssionid:
      value:
        status: 404
        error: "Not Found"
        message: "No Submission with that ID"
    error400content:
      value:
        status: 400
        error: "Bad Request"
        message: "Content must be provided"
  securitySchemes:
    ApiKeyAuth:        # arbitrary name for the security scheme
      type: apiKey
      in: header       # can be "header", "query" or "cookie"
      name: Authorization # name of the header, query parameter or cookie
# 2) Apply the API key globally to all operations
security:
  - ApiKeyAuth: [] 
